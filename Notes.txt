BY - FastAPI - A python framework | Full Course
Bitfumes

Here schema.py is pydantic model and model.py is sqlalchemy model.also whenver we talk about about response model or request body or request , it is also about pydantic

is sqlalchemy.ext.declarative imp to use and what is the purpose of it?

ChatGPT said:
Yes, sqlalchemy.ext.declarative is important if you are using SQLAlchemy ORM (Object Relational Mapper). Here's a step-by-step explanation and the role of declarative_base in particular:

‚úÖ Step-by-Step Process of Using SQLAlchemy in Python (with ORM)
Step 1: Install SQLAlchemy
bash

.
pip install sqlalchemy
Step 2: Create the Database Engine
This establishes a connection to your database.

python

.
from sqlalchemy import create_engine

SQLALCHEMY_DATABASE_URL = "sqlite:///./blog.db"
engine = create_engine(
    SQLALCHEMY_DATABASE_URL, 
    connect_args={"check_same_thread": False}  # Needed for SQLite only
)
Step 3: Create a Declarative Base (‚úÖ Your Question)
python

from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()



üî∂ What is declarative_base() and why it's important?
It creates a base class that your model classes (tables) will inherit from.

This is essential for using the ORM capabilities of SQLAlchemy.

Without it, you can't define models in the ORM way (i.e., classes mapping to tables).

‚úÖ So yes, it's important if you're using ORM. If you're using raw SQL or SQLAlchemy Core, you don‚Äôt need this.

Step 4: Define Your Database Models (Tables)
python

from sqlalchemy import Column, Integer, String

class Blog(Base):
    __tablename__ = 'blogs'
    
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String)
    content = Column(String)
Step 5: Create the Tables in the Database
python

Base.metadata.create_all(bind=engine)
Step 6: Create a Session to Interact with the DB
python

from sqlalchemy.orm import sessionmaker

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Then in your code:

python

.
db = SessionLocal()
new_blog = Blog(title="FastAPI", content="Learn SQLAlchemy ORM")
db.add(new_blog)
db.commit()
db.refresh(new_blog)
db.close()
üîÑ Summary of the Role of declarative_base()
Purpose	Description
Enables ORM	Allows you to define tables as Python classes
Provides a base for all models	All model classes must inherit from it
Helps track models	It holds metadata and mappings between classes and tables

Let me know if you want the equivalent SQLAlchemy Core (without ORM) version too.





You said:
why do we create session


ChatGPT said:
Great question! Creating a session in SQLAlchemy is a crucial step when you're using the ORM (Object Relational Mapper).

‚úÖ Why Do We Create a Session?
A Session in SQLAlchemy acts as the main point of communication between your Python code and the database.

It helps you:

Create, read, update, and delete records (CRUD operations).

Manage transactions.

Cache and track objects to avoid duplicate queries.

Batch multiple operations into a single unit of work.

üîß Think of a Session as:
A staging zone for changes before committing them to the database.

Until you call .commit(), the changes aren't final.

üîÑ Life Cycle of a Session (Typical Steps)
Create a Session:

python

.
db = SessionLocal()  # Creates a DB session (like opening a DB connection)
Use the Session:

python

.
# Create a new blog post
new_blog = Blog(title="SQLAlchemy", content="Learn Sessions")
db.add(new_blog)

# Query data
blogs = db.query(Blog).all()
Commit the Transaction:

python

.
db.commit()  # Saves changes to the database
Refresh the Object (Optional):

python

.
db.refresh(new_blog)  # Get updated data from the DB (like auto-incremented ID)
Close the Session:

python

.
db.close()  # Always close to release the connection
‚ö†Ô∏è Why Not Use Engine Directly Instead of Session?
Because:

The engine only handles raw DB connections.

The session manages ORM-mapped Python objects (e.g., classes like Blog).

The session handles transactions, object states, and caching.

üß† Analogy:
Think of the engine as a car engine (raw power) and the session as the driver's controls ‚Äî without the session, you can't interact with the engine in a controlled way.




--------------------------------------------
why do we need to create session instance as db, what does session do?


ChatGPT said:
Great question ‚Äî understanding why we create a Session instance (like db) is key to mastering SQLAlchemy and backend development.

üîÅ What is a Session in SQLAlchemy?
In SQLAlchemy, a Session is a workspace for making changes to the database.

It:

Manages database connections

Tracks changes to objects (models)

Handles queries, inserts, updates, deletes

Manages transactions (commit, rollback, etc.)

üß† Why Do We Create db: Session = Depends(get_db)?
Because:

We want a fresh database session for each API request.

Depends(get_db) tells FastAPI to:

Call get_db() before running your route

Inject the returned Session instance as the db argument

Close the session automatically after the request is done

üîß Example get_db() function:
python
.
.
from sqlalchemy.orm import Session
from .database import SessionLocal

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
SessionLocal() creates a new DB session (like db = psy.g2.connect(...)).

yield gives FastAPI access to db during the request.

finally ensures the session is closed even if the route errors.

üîÑ What Does the Session Actually Do?
In this code:

python
.
.
new_blog = model.Blog(title=request_body.title, body=request_body.body)
db.add(new_blog)         # Stages the INSERT
db.commit()              # Executes it
db.refresh(new_blog)     # Refreshes with new values (e.g. auto-generated ID)
Line	What it does
db.add()	Tells SQLAlchemy to insert this object
db.commit()	Commits transaction (INSERTs row into DB)
db.refresh()	Reloads the object with DB-generated values

Without a Session, none of this would be possible ‚Äî you'd have no way to track or commit changes to the database.

üîê What Happens Without a Session?
You'd have to:

Manually connect to the DB

Manually write SQL

Manually handle transactions (commit, rollback)

Manually close the connection

SQLAlchemy's Session abstracts all that for you.

‚úÖ Summary
Concept	Purpose
Session	Manages DB operations + transactions
db = Depends(get_db)	Injects a fresh session per request
db.add, commit, refresh	Used to insert & retrieve from the DB
get_db()	Custom FastAPI dependency to open/close session



class ShowBlog(BlogClass):
    class Config:
        from_attributes = True

what is this used for


ChatGPT said:
Great question!

python
.y
.
class ShowBlog(BlogClass):
    class Config:
        from_attributes = True
This is used with Pydantic (usually Pydantic v2) to allow a model (ShowBlog) to be created directly from a SQLAlchemy ORM object ‚Äî for example when returning data from the database in FastAPI.

üß† Why from_attributes = True?
In Pydantic v2, from_attributes = True tells Pydantic:

"You're allowed to create this response model from ORM instances (like Blog), not just from dicts."

Without this, you'll get errors like:

python
.y
.
ValidationError: value is not a valid dict
‚úÖ When You Need It
Suppose you have:

SQLAlchemy model
python
.y
.
class Blog(Base):
    __tablename__ = 'blogs'
    id = Column(Integer, primary_key=True)
    title = Column(String)
    body = Column(String)
Pydantic schema to return from FastAPI:
python
.y
.
class BlogClass(BaseModel):
    title: str
    body: str

class ShowBlog(BlogClass):
    id: int

    class Config:
        from_attributes = True
FastAPI endpoint:
python
.y
.
@app.get("/blog/{id}", response_model=schemas.ShowBlog)
def get_blog(id: int, db: Session = Depends(get_db)):
    blog = db.query(model.Blog).filter(model.Blog.id == id).first()
    return blog  # <-- ORM object
üëâ Because blog is a SQLAlchemy model instance, from_attributes = True allows Pydantic to serialize it correctly.

‚úÖ Summary
What it does	Why it's important
from_attributes = True	Allows Pydantic model to accept ORM objects
Required in Pydantic v2	(in v1 it was orm_mode = True)
Used when returning ORM objects	For cleaner, automatic responses in FastAPI



pydantic vrsion 2 uses from_attributes and v1 uses orm_mode?


ChatGPT said:
Yes ‚Äî exactly! ‚úÖ

üîÑ Difference between Pydantic v1 and v2:
Feature	Pydantic v1	Pydantic v2
Enable ORM serialization	orm_mode = True in Config	from_attributes = True in Config
Purpose	Allow creating Pydantic models from SQLAlchemy objects (ORM instances)	

‚úÖ Pydantic v1 Example:
python
Copy
Edit
class ShowBlog(BaseModel):
    title: str
    body: str

    class Config:
        orm_mode = True
‚úÖ Pydantic v2 Example:
python
Copy
Edit
class ShowBlog(BaseModel):
    title: str
    body: str

    class Config:
        from_attributes = True
üìå When You Need This
In FastAPI, when you return ORM objects directly from SQLAlchemy like:

python
Copy
Edit
return db.query(Blog).first()
You need orm_mode = True (v1) or from_attributes = True (v2) so Pydantic knows how to turn that SQLAlchemy model into a proper JSON response.

what is the difference between Response Model - Return Type and response model parameter, 
how do they affect the output , explain with example


ChatGPT said:
Great question ‚Äî FastAPI's response_model parameter and Python's return type hint (->) seem similar, but they serve different purposes. Let‚Äôs break it down clearly.

‚úÖ Summary Table
Feature	response_model=...	-> ReturnType (Python)
Used by	FastAPI	Python (type hinting / editors)
Affects HTTP response	‚úÖ Yes (controls API output)	‚ùå No (just documentation/static check)
Enforces response shape	‚úÖ Yes (filters extra fields, validates output)	‚ùå No
Used in OpenAPI docs	‚úÖ Yes	‚úÖ Yes

üîç Explanation with Example
Example Setup:
python
Copy
Edit
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Blog(BaseModel):
    title: str
    body: str
    admin_secret: str
üî∏ 1. Without response_model (Only return type hint):
python
Copy
Edit
@app.get("/blog")
def get_blog() -> Blog:
    return Blog(title="FastAPI", body="Intro to FastAPI", admin_secret="12345")
üìå What happens:
The full response is returned including admin_secret:

json
Copy
Edit
{
  "title": "FastAPI",
  "body": "Intro to FastAPI",
  "admin_secret": "12345"
}
Type hint (-> Blog) is for the editor or linter only, not used by FastAPI to filter or validate response.

üî∏ 2. With response_model:
python
Copy
Edit
class BlogPublic(BaseModel):
    title: str
    body: str

@app.get("/blog", response_model=BlogPublic)
def get_blog():
    return Blog(title="FastAPI", body="Intro to FastAPI", admin_secret="12345")
üìå What happens:
Response is filtered to match BlogPublic. Even though admin_secret is returned internally, it is removed from the final output.

json
Copy
Edit
{
  "title": "FastAPI",
  "body": "Intro to FastAPI"
}
Also shown correctly in OpenAPI docs (/docs).

‚úÖ Best Practice
Always use response_model=... in your route decorator:

python
Copy
Edit
@app.get("/...", response_model=YourOutputSchema)
It ensures correct shape and type of output.

It protects sensitive/internal data.

It auto-documents your API properly.

Bonus Tip üí°
You can even add response transformations like:

python
Copy
Edit
@app.get("/user", response_model=UserOut, response_model_exclude_unset=True)
Let me know if you want to test it in your own FastAPI project!








You said:
@app.get("/user", response_model=UserOut, response_model_exclude_unset=True)

how and why , explain with example


ChatGPT said:
Great! Let‚Äôs break down what this line does:

python
Copy
Edit
@app.get("/user", response_model=UserOut, response_model_exclude_unset=True)
üîç What it means:
Parameter	Purpose
response_model=UserOut	Tells FastAPI to shape the output using the UserOut Pydantic model
response_model_exclude_unset=True	Removes fields from the response that were not explicitly set (i.e., used default values)

üì¶ Why Use response_model_exclude_unset=True?
Because sometimes your Pydantic model may include optional fields (or fields with defaults), and you don‚Äôt want to include them in the output unless the data was explicitly set.

‚úÖ Example
1. Schema
python
Copy
Edit
from pydantic import BaseModel
from typing import Optional

class UserOut(BaseModel):
    name: str
    email: Optional[str] = None
    is_active: bool = True
2. Endpoint
python
Copy
Edit
@app.get("/user", response_model=UserOut, response_model_exclude_unset=True)
def get_user():
    return {"name": "Antra"}  # no email, no is_active explicitly set
üîÅ What happens in response?
Since email and is_active were not explicitly set, they are excluded in the final response:

json
Copy
Edit
{
  "name": "Antra"
}
‚ùå Without response_model_exclude_unset=True:
python
Copy
Edit
@app.get("/user", response_model=UserOut)
Now FastAPI includes all fields ‚Äî even the default ones:

json
Copy
Edit
{
  "name": "Antra",
  "email": null,
  "is_active": true
}
‚úÖ When to Use It
Use response_model_exclude_unset=True when:

You want cleaner responses with only the fields that were actually set.

You're working with patch updates, partial responses, or default-heavy models.

You want to avoid exposing default or sensitive values unless they‚Äôre meaningful.


# using doc tags

In FastAPI, you can use doc tags to organize your API documentation in Swagger UI (/docs) or ReDoc (/redoc). These tags help group related endpoints together, making the API easier to explore and understand.

‚úÖ Example: Using Tags in FastAPI
python
Copy
Edit
from fastapi import FastAPI

app = FastAPI()

@app.get("/users", tags=["Users"])
def get_users():
    return [{"id": 1, "name": "Alice"}]

@app.post("/users", tags=["Users"])
def create_user(user: dict):
    return {"message": "User created"}

@app.get("/items", tags=["Items"])
def get_items():
    return [{"id": 1, "name": "Laptop"}]
üîç What it does:
In the Swagger UI (http://localhost:8000/docs), you'll see two collapsible sections:

Users ‚Üí includes /users GET and POST

Items ‚Üí includes /items GET

üõ†Ô∏è Defining Tags Metadata (Optional but Useful)
You can also define metadata for each tag for better documentation:

tags_metadata = [
    {
        "name": "Users",
        "description": "Operations with users. Create, read, update, delete.",
    },
    {
        "name": "Items",
        "description": "Manage items in the catalog.",
    },
]

app = FastAPI(openapi_tags=tags_metadata)
Now the Swagger UI will show detailed tag descriptions.

‚úÖ Summary
Feature	How to Use
Tag endpoints	tags=["TagName"] in @app.get, etc.
Custom docs	openapi_tags=[...] in FastAPI()
Swagger URL	Visit http://localhost:8000/docs
ReDoc URL	Visit http://localhost:8000/redoc

# relationship between tables using sqlalchemy

it can be one-to-one, to many and many to many

Do we always need to use a Foreign Key (FK) in every type of relationship?

Short Answer:
‚úÖ Yes, you should use a Foreign Key in all relationship types ‚Äî One-to-Many, One-to-One, and Many-to-Many ‚Äî to properly define relationships and ensure referential integrity.

  user_id = Column(Integer, ForeignKey('users.id')) -----id should be a primary key in other table.


  blogs=relationship("Blog" , back_populates="creator")
  ‚ùó So, is FK mandatory?
Technically:
No, you can define relationships in SQLAlchemy without enforcing foreign keys in the database.

But doing that means you lose data integrity and ORM features may break or behave inconsistently.

Practically:
‚úÖ Yes, always use foreign keys when modeling real relationships between tables.

###
when we create seperate routes (in the router folder) we to register them in main.py


###
api router and prefix , tags

router = APIRouter(
    prefix='/user',
     tags=['users']
)

###
Blog and user repositories

repository/blog.py
def get_all_blogs(db : Session):  // it is accepting and validating the db as must be a session 
    blogs = db.query(model.Blog).all()
    # print(blogs)
    return blogs

router/blog.py
@router.get('/get-all-blogs', status_code=status.HTTP_200_OK , response_model= List[schemas.ShowBlog] )
def allBlogs(db : Session = Depends(database.get_db)):
    # blogs = db.query(model.Blog).all()
    # # print(blogs)
    # return blogs
    return blog.get_all_blogs(db)



